{
  "homeWorks": [
    {
      "hw": "",
      "id": 0,
      "mainPage": "In this sample web page I'd like to present my selfworks and homeworks. \n\t\t\t\n\tAlongside HTML and CSS, JavaScript is one of the core technologies of the World Wide Web. JavaScrenables interactive web pages and is an essential part of web applications. The vast majority of websiuse it,[10] and major web browsers have a dedicated JavaScript engine to execute it.\n\t\t\t\n\tAs a multi-paradigm language, JavaScript supports event-driven, functional, and imperative (including object-oriented and prototype-based) programming styles. It has APIs for working with text, arrays, dates, regular expressions, and the DOM, but the language itself does not include any I/O, such as networking, storage, or graphics facilities. It relies upon the host environment in which it is embedded to provide these features.\t\n\t\t\t\n\tInitially only implemented client-side in web browsers, JavaScript engines are now embedded in many other types of host software, including server-side in web servers and databases, and in non-web programs such as word processors and PDF software, and in runtime environments that make JavaScript available for writing mobile and desktop applications, including desktop widgets."
    },
    {
      "hw": 1,
      "tasks": {
        "task1": "Нарисуйте блок-схему алгоритма, который проверяет значение входного параметра x, и если это значение больше или равно 0, то возвращает в качестве результата строку \"Число положительное\", в противном случае - строку \"Число отрицательное\"",
        "task2": "Нарисуте блок-схему алгоритма суммирования 10 чисел, кратных 5 ( начиная с 0 )\n\n просуммировать нужно десять чисел 5, 10, 15, 20, 25, 30, 35, 40, 45, 50",
        "task3": "Напилите кодец, который работает с массивом произвольных целых чисел\n\nvar numbers = [ 254, 115, 78, 25, 91, 45, 37 ]\nВаш скрипт должен вывести в консоль все числа больше 50\n\nПосказка: используйте оператор цикла и условный оператор"
      },
      "codes": {
        "code1": "images/scheme1.svg",
        "code2": "images/scheme2.svg",
        "code3": "function homeWorkThree() {\n    var numbers = [254, 115, 78, 25, 91, 45, 37]\n    var res = []\n    for (var i = 0; i < numbers.length; i++) {\n        (numbers[i] > 50) ? res.push(numbers[i]) : null\n    }\n    alert(res)\n}\nhomeWorkThree()"
      },
      "id": 1
    },
    {
      "hw": 2,
      "tasks": {
        "task1": "Обязательная часть ( 3 балла )\nСоздайте пустой массив letters\n\nСоздайте строку из нескольких слов, например \"Backend As A Service\"\n\nНапилите код, который разбивает эту строку на массив слов и пушит в массив letters первый символ каждого слова\n\nВыведите результат в консоль\n\nОбъедините все элементы массива letters в одну строку и выведите ее в консоль",
        "task2": "Объявите функцию с одним формальным параметром, которая проверяет тип данных переданного аргумента и:\n\nесли это число, возвращает текущую дату в формате \"20.02.2019, 13:21:51\"\nв противном случае возвращает строку \"Неверный тип данных\"\nВызовите функцию\n\n\n",
        "task3": "Перейдите по ссылке\n\nОткройте Chrome DevTools\n\nВ панели навигации найдите файл index01.js ( в папке js/ )\n\nУстановите breakpoint на строке вызова функции insertUserText ( строка 10 )\n\nПерезагрузите страницу\n\nТеперь обратите внимание на функцию testUserText\n\nВаша задача: обезопасить свою страницу от внедрения вредоносного кода с помощью функции валидации testUserText\n\nфункция должна вывести на страницу текст пользователя безопасным способом\n\n( т.е. текст должен быть выведен \"as is\" ( как есть ), но код не должен быть выполнен )"
      },
      "codes": {
        "code1": "function homeWorkOne() {\n    var letters = []\n    var str = \"Backend As A Service\"\n    var newStr = str.split(\" \")\n    for (var i = 0; i < newStr.length; i++){\n        letters.push((newStr[i].charAt(0)))\n    }\n    alert(letters)\n}\nhomeWorkOne()\n",
        "code2": "function homeWorkTwo(param) {\n    typeof param === 'number' ?\n        alert(new Date().toLocaleString()) :\n            alert('Неверный тип данных')\n}\nhomeWorkTwo(5)\n\nhomeWorkTwo('google')\n",
        "code3": "images/HW_2.png"
      },
      "id": 2
    },
    {
      "hw": 4,
      "tasks": {
        "task1": "Создайте объект, свойства которого описывают содержимое дамской сумочки\n\nСоздайте метод объекта, позволяющий удалить что-то из сумочки\n\nСоздайте метод объекта, позволяющий положить что-то в сумочку",
        "task2": "",
        "task3": "Объявите конструктор, который создает экземпляры с унаследованным методом addProperty\n\nМетод addProperty должен принимать два аргумента:\n\nимя свойства\nзначение свойства\nи добавлять экземпляру новое свойство с указанным именем и значением"
      },
      "codes": {
        "code1": "function homeWorkOne() {\n\n    var womansBag = {\n        content: [\n            \"Passpor\",\n            \"Lipstick\",\n            \"Mobile\",\n            \"Mirrow\",\n            \"Notepad\",\n            \"Tablet\"\n        ],\n        addItem: function (item) {\n            this.content.push(item)\n        },\n        deleteITEM: function (num) {\n            this.content.splice(num, 1)\n        }\n    }\n    alert(womansBag.content)\n    womansBag.addItem('AddedItem')\n    alert(womansBag.content)\n    womansBag.deleteITEM(1)\n    alert(womansBag.content)\n}\nhomeWorkOne()",
        "code2": "",
        "code3": "function homeWorkThree() {\n\n    function testConstructor(age, hobby) {\n        this.age = age || 50\n        this.hobby = hobby || \"Tenis\"\n        this.addProperty = function (name, value) {\n            this[name] = value\n        }\n    }\n\n    var test = new testConstructor\n    alert(testConstructor)\n    test.addProperty('Masha', 'Married')\n    alert(test.Masha)\n}\nhomeWorkThree()"
      },
      "id": 4
    },
    {
      "hw": 5,
      "tasks": {
        "task1": "Создайте массив tags с именами валидных тегов HTML5\n\nТеперь создайте массив classes с именами классов\n\n( число элементов в массиве classes должно быть не меньше, чем число элементов массива tags )\n\nСоздайте элемент style и вставьте его в head документа\n\nДобавьте контент элемента style с описанием классов, имена которых находятся в массиве classes\n\nИтерируйте массив tags, создавая соответствующие элементы и вставляя их на страницу, добавляя каждому элементу класс из массива classes",
        "task2": "Результат должен быть аналогичен тому, что получится в предыдущем упражнении\n\nОднако исходный массив tags должен быть массивом объектов, каждый из которых содержит не только имя тега элемента, но и его атрибуты, а так же хотя бы один обработчик события\n\nТаким образом, массив classes нам уже не нужен, но кроме стилизации элементов нужно еще добавить их контент, используя как атрибуты тегов, так и свойства элементов DOM",
        "task3": "Напилить код, который выбирает все элементы-потомки body ( :warning: кроме элементов script ) и добавляет им класc:\n\n.redBack {\n    background-color: red!important;\n}\nАльтернативный вариант - выбрать все заранее заданные элементы:\n\nvar tags = [ \"header\", \"footer\", \"main\", \"div\", \"p\" ]\nЗапустить код в консоли любой страницы\n\nПодсказка: используйте методы объекта classList\n\n\n"
      },
      "codes": {
        "code1": "function homeWorkOne () {\n    var tags = [\"header\", \"div\", \"div\", \"p\", \"footer\"]\n    var classes = [\"top\", \"logo\", \"container\", \"parag\", \"bottom\"]\n\n    var style = exersize1.shadow.appendChild(\n        document.createElement('style'))\n    style.innerHTML =\n        `\n.top{ width 100%; height: 100px; background-color: green; }\n.logo{ width 100%; height: 100px; background-color: red; }\n.container{ width 100%; height: 100px; background-color: blue; }\n.parag{ width 100%; height: 100px; background-color: orange; }\n.bottom{ width 100%; height: 100px; background-color: gray; }\n`\n\n    for (var tag in tags) {\n        exersize1.exersizeResultBlock.appendChild(\n            document.createElement(`${tags[tag]}`))\n            .setAttribute('class', `${classes[tag]}`)\n    }\n    }\nhomeWorkOne ()",
        "code2": "function homeWorkTwo() {\n    var tags = [\n        {\n            name: 'header',\n            attrs: {\n                className: 'header',\n                innerText: 'Hello World',\n            }\n        },\n        {\n            name: 'section',\n            attrs: {\n                className: 'section',\n                innerText: 'Good Morning',\n            }\n        },\n        {\n            name: 'div',\n            attrs: {\n                className: 'div',\n                innerText: 'Good afternoon',\n                title: 'Title'\n            }\n\n        },\n        {\n            name: 'img',\n            attrs: {\n                src: 'http://www.primusdatabase.com/images/a/a0/Collideratom.png',\n                title: 'Title'\n            }\n        },\n        {\n            name: 'p',\n            attrs: {\n                className: 'paragraph',\n                innerText: '***',\n            }\n        },\n        {\n            name: 'footer',\n            attrs: {\n                className: 'footer',\n                innerText: 'Omfg!'\n            }\n\n        }\n    ]\n\n    var style = exersize2.shadow.appendChild(\n        document.createElement('style')\n    )\n    style.textContent = `\n  .footer,.paragraph,.div,.section,.header {\n    height: 100px;\n        width: 100%;\n    \n  }\n  img{\n    width: 200px;\n  }\n  .footer {\n        background-color: gray;\n  }\n  .paragraph {\n        background-color: yellow;\n     \n  }\n  .div {\n        background-color: purple;\n     \n  }\n  .section {\n        background-color: green;\n     \n  }\n  .header {\n        background-color: orange;\n     \n  }\n`\n\n    function clickHandler(event) {\n        function randomColor() {\n            return Math.round(Math.random() * 255)\n        }\n\n        event.target.style.color =\n            `rgb(${randomColor()},${randomColor()},${randomColor()})`\n    }\n\n    for (var tag of tags) {\n        var elem = exersize2.exersizeResultBlock.appendChild(\n            document.createElement(`${tag.name}`)\n        )\n        for (var attr in tag.attrs)\n            elem[attr] = tag.attrs[attr]\n        elem.onclick = function (event) {\n            clickHandler(event)\n        }\n    }\n}\nhomeWorkTwo()\n",
        "code3": "function homeWorkThree() {\n    var style = exersize3.shadow.appendChild(\n        document.createElement('style'))\n\n    style.textContent = `\n    .redBack {\n        background-color: red!important;\n    } `\n    for (var elem of document.body.children) {\n        elem.tagName === \"SCRIPT\" ? null :\n            elem.className = \"redBack\"\n    }\n}\nhomeWorkThree()"
      },
      "id": 5
    },
    {
      "hw": 3,
      "tasks": {
        "task1": "example3333",
        "task2": "",
        "task3": ""
      },
      "codes": {
        "code1": "var img = exersize1.exersizeResultBlock.appendChild(document.createElement('img'))\nimg.src = 'https://st2.depositphotos.com/3324449/6393/i/450/depositphotos_63937059-stock-photo-rose-placed-on-the-books.jpg'",
        "code2": "",
        "code3": ""
      },
      "id": 6
    }
  ]
}